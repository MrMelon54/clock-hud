plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.5-SNAPSHOT" apply false
    id "io.github.pacifistmc.forgix" version "1.2.6"
    id "org.ajoberstar.grgit" version "4.1.0"
    id "systems.manifold.manifold-gradle-plugin" version "0.0.2-alpha"
}

def writeBuildGradlePredefine(List<String> mcVers, int mcIndex) {
    // Build the list of preprocessors to use
    StringBuilder sb = new StringBuilder();

    sb.append("# DON'T TOUCH THIS FILE, This is handled by the build script\n");


    for (int i = 0; i < mcVers.size(); i++) {
        String verStr = mcVers[i].replace(".", "_");
        sb.append("MC_" + verStr + "=" + i.toString() + "\n");

        if (mcIndex == i)
            sb.append("MC_VER=" + i.toString() + "\n");
    }


    // Check if this is a development build
    if (mod_version.toLowerCase().contains("dev")) {
        // WARNING: only use this for logging, we don't want to have confusion
        // when a method doesn't work correctly in the release build.
        sb.append("DEV_BUILD=\n");
    }

    new File(projectDir, "build.properties").text = sb.toString()
}

project.gradle.ext.getProperties().each { prop ->
    rootProject.ext.set(prop.key, prop.value)
}
writeBuildGradlePredefine(rootProject.mcVers, rootProject.mcIndex)

rootProject.versionStr = "mc${project.minecraft_version}-${project.mod_version}-${getVersionMetadata()}"

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        // The following line declares the mojmap mappings, you may use other mappings as well
        mappings loom.officialMojangMappings()
        // The following line declares the yarn mappings you may select this one as well.
        // mappings "net.fabricmc:yarn:1.19.4+build.2:v2"
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = rootProject.archives_base_name
    version = "${project.name}-${rootProject.versionStr}"
    group = rootProject.maven_group

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.
        maven { url "https://maven.shedaniel.me/" }
        maven { url "https://maven.terraformersmc.com/releases/" }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = rootProject.java_version as Integer
        options.compilerArgs += ["-Xplugin:Manifold"]
    }

    processResources {
        exclude { file ->
            if (file.name.contains(".${mod_id}.accesswidener") && file.name != "${accessWidenerVersion}.${mod_id}.accesswidener") {
                return true
            }
            return false
        }
    }

    java {
        withSourcesJar()
    }
}

forgix {
    group = "com.mrmelon54.ClockHud"
    mergedJarName = "${project.archives_base_name}-${rootProject.versionStr}.jar"

    if (findProject(":fabric"))
        fabric {
            jarLocation = "build/libs/${project.archives_base_name}-fabric-${rootProject.versionStr}.jar"
        }

    if (findProject(":quilt"))
        quilt {
            jarLocation = "build/libs/${project.archives_base_name}-quilt-${rootProject.versionStr}.jar"
        }

    if (findProject(":forge"))
        forge {
            jarLocation = "build/libs/${project.archives_base_name}-forge-${rootProject.versionStr}.jar"
        }

    if (findProject(":neoforge"))
        custom {
            projectName = "neoforge"
            jarLocation = "build/libs/${project.archives_base_name}-neoforge-${rootProject.versionStr}.jar"
        }
}

def getVersionMetadata() {
    def build_id = System.getenv("GITHUB_RUN_NUMBER")

    // CI builds only
    if (build_id != null) {
        return "build.${build_id}"
    }

    if (grgit != null) {
        def head = grgit.head()
        def id = head.abbreviatedId

        // Flag the build if the build tree is not clean
        if (!grgit.status().clean) {
            id += "-dirty"
        }

        return "rev.${id}"
    }

    // No tracking information could be found about the build
    return "unknown"
}
